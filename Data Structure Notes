//Moduls 01
//Time & space complexcity
time & space complexcity depend on n then we called o(n);
order of n = O(n)

#logarithmic complexity:
when a loop use increment part intro or divide then we called O(nlogn)
O(nlogn)

#Sqrt complexity:
when a loop use sqrt(n) or i*i <= n
then we called order of = O(sqrt(n))

#quadratic complexity:
//order of = o(n*n);
//order of = o(n*m);
//order of = O(n*n*n);

#linearithmic complexity:
first n intro then nlog n then we called:
Order of = O(n*nlogn)


//How to we find which complexity is best:
suppose : N = 1000;

Consant:       O(1)       -> 1
Linear:        O(N)       -> 1000
Logarithmic:   O(logN)    -> 10
Square root:   O(sqrt(N)) -> 32
quadratic:     O(N*N)     -> 1000000
Linearithmic:  O(NlogN)   -> 10000


//Sorted complexity
Consant:       O(1)
Logarithmic:   O(logN)
Square root:   O(sqrt(N))
Linear:        O(N) 
Linearithmic:  O(NlogN)
quadratic:     O(N*N) 

//space complexity sate to time complexity
1. space complexity just diffrent way to array 
2. 2d array space complexity Oder of = O(n*n)
3. space complexity temon kaje lage nah

Find out time complexity of the following problems:
problem 01:
O(n*n)
problem 02:
O(N*N)
problem 03:
O(n*Sqrt(n))
problem 04:
O(n3)
problem 05:
O(sqrt(n))
probem 06:
O(nlogn)
problem 07:
O(N*NLOGN)

//Moduls 02:
##stl : vector
//Vector initialization:
     //vector<int> v;        //type 1
    //vector<int> v(10);    //type 2
    //vector<int> v(10,-1); //type 3
    //vector<int> v2(v);    //type 4
    // int a[5] = {1,2,3,4,5};
    //vector<int> v(a,a+5); //type 5

///capacity,resize,empty,clear function

#include<bits/stdc++.h>
using namespace std;
int main(){
    vector<int> v;
    v.push_back(10);
    v.push_back(20);
    v.push_back(30);
    v.resize(7);
    for(int i=0;i<v.size();i++){
        cout << v[i] << " ";
    }
    //cout << v.size() << endl;
    //v.clear();
    //cout << v.size() << endl;
    // cout<< v[0] <<endl;
    // cout<< v[1] <<endl;
    // cout<< v[2] <<endl;
    // cout << v.capacity() <<endl;
    // v.push_back(10);
    // cout << v.capacity() << endl;
    // v.push_back(10);
    // cout << v.capacity() << endl;
    // if(v.empty()){
    //     cout << "Yes" <<endl;
    // }else{
    //     cout <<"not"<<endl;
    // }
    return 0;
}

//vector capacity increase her value when we push new value
//v.clear() = when we clear a vector then we use v.clear() function
//v.clear() = just remove size but not remove value
//v.empty() = when we check this vector is empty or not then we use this function
//v.resize(4,100) = when vector size increment or decrement then we use this function
// vector a joto ta value ase er porer sob gula 100 kore dibe

##range base loop,insert,erase,push_back,pop_back this functions:

//#include<bits/stdc++.h>
using namespace std;
int main(){
    
    // vector <int> v = {1,2,3,4,5};
    // vector<int> v2;
    // v2 = v;
    // for(int i=0;i < v2.size();i++){
    //     cout << v2[i] <<" ";
    // }
    // for(int x : v2){
    //     cout << x <<" ";
    // }
    vector<int> v ={1,2,3,4,5,6};
    vector<int> v2 = {100,200,300};
    //v.insert(v.begin()+2,v2.begin(),v2.end());
    v.erase(v.begin()+1,v.begin()+5);//when we delete middle element

    for(int x : v){
        cout <<  x <<" ";    
     }
    return 0;
}
//v2 = v we assign one vector to another
// we use range base forloop
//v.push_back = add new value to last index
//v.pop_back = remove element to last index
//v.insert(pos,val) = when we need new element add in array
//then we use v.insert(v.begin()+2,100);
//v.erase(v.begin()+2);// we use this function when any position we deleted
////v.insert(v.begin()+2,v2.begin(),v2.end());

##replace, find function

//#include<bits/stdc++.h>
using namespace std;
int main(){
    vector<int> v = {1,2,3,2,5,2};
    // replace(v.begin(),v.end()-1,2,100);
   auto it = find(v.begin(),v.end(),5);
    if(it == v.end()){
        cout << "Not found"<<endl;
    }else{
        cout <<"Found" <<endl;
    }
    return 0;
}
//Replace function
//replace(v.begin(),v.end()-1,2,100);

//find function
//auto it = find(v.begin(),v.end(),100);
//we find any value uses this function

##front, back, size function:

#include<bits/stdc++.h>
using namespace std;
int main(){
    vector<int> v={1,2,3,4,5};
    cout << v[3] << endl;
    cout << v.back() <<endl;
    return 0;
}
//vector element access:
//v[3]

//when we print array last element then we use 
//v.back()
//another way to access element: 
// cout << v[v.size()-1] <<endl;

//when we print arral frist element then we use
//v.front()
//another way to access element:
//v[0]

##iterator:

//#include<bits/stdc++.h>
using namespace std;
int main(){
    vector<int> v ={1,2,3,4,5,6};
    for(auto it = v.begin(); it < v.end();it++){
        cout << *it << " ";
    }
    return 0;
}

##vector input output:
//#include<bits/stdc++.h>
using namespace std;
int main(){
    int n;
    cin >> n;
    // vector<int>v(n);
    // for(int i=0;i<n;i++){
    //     cin >> v[i];
    // }
    vector<int>v;
    for(int i=0;i<n;i++){
        int x;
        cin >> x;
        v.push_back(x);
    }
    for(int i=0;i<n;i++){
        cout << v[i] <<" ";
    }
    return 0;
}
//input , output of vector
//two way of vector ,we input from user

##vector string input and output:

//#include<bits/stdc++.h>
using namespace std;
int main(){
    int n;
    cin >> n;
    cin.ignore();
    vector<string> v(n);
    for(int i=0;i<n;i++){
        getline(cin,v[i]);
    }
    for(string s : v){
        cout << s <<endl;
    }
    return 0;
}
//string input and output
//when we input from user with full name then we use 
// getline(cin,v[i]);
//and after size we call cin.ignore();
moduls 03:
#prefix sum
#include<bits/stdc++.h>
using namespace std;
int main(){
    int n,q;
    cin >> n >> q;
    vector<long long int> v(n+1);
    for(int i=1;i<=n;i++){
        cin >> v[i];
    }
    vector<long long int> pre(n+1);
    pre[1] = v[1];
    for(int i=2;i<=n;i++){
        pre[i] = pre[i-1] + v[i];
    }
    while(q--){
        int l,r;
        cin >> l >> r;
        long long int sum;
        if( l == 1){
            sum = pre[r];
        }else{
            sum = pre[r] - pre[l-1];
        }
        cout << sum << endl;
    }
    return 0;
}

#binary search
#include<bits/stdc++.h>
using namespace std;
int main(){
    int n;
    cin >> n;
    int a[n];
    for(int i = 0;i<n;i++){
        cin >> a[i];
    }
    int val;
    cin >> val;
    int flag = 0;
    int l=0;
    int r=n-1;
    while(l <= r){
        int mid = (l+r)/2;
        if(a[mid] == val ){
            flag =1;
            break;
        }
        else if(a[mid] > val)
        {
            r = mid - 1;
        }
        else
        {
            l = mid + 1;
        }
    }
    if(flag == 1){
        cout << "found"<<endl;
    }else{
        cout << "not found"<<endl;
    }
    return 0;
}
#range base query:
#include<bits/stdc++.h>
using namespace std;
int main(){
    int n,q;
    cin >> n >>q;
    vector<long long int>v(n+1);
    for(int i=1;i<=n;i++){
        cin >> v[i];
    }
    //prefixt store
    vector<long long int> pre(n+1);
    pre[1] = v[1];
    for(int i=2;i<=n;i++){
        pre[i] = pre[i-1] + v[i];
    }
    //prefix sum
    while(q--){
        int l,r;
        cin >> l >> r;
       long long int sum;
        if(l == 1){//left indext if == 1 is
            sum = pre[r];
        }else{
            sum = pre[r] - pre[l-1];
        }
         cout << sum <<endl;
    }
    return 0;
}

//

Moudls : 05:
##single linklist, 
#assign linklist 5.4:
#include<bits/stdc++.h>
using namespace std;
class Node
{
    public:
    int val;
    Node* next;
};
int main(){
    Node a,b,c;
    a.val = 10;
    b.val = 20;
    c.val = 30;

    a.next = &b;
    b.next = &c;
    c.next = NULL;
    cout << a.val <<endl;
    cout << a.next->val <<endl;
    cout << a.next->next->val <<endl;
    return 0;
}

#use constructor for linklist assign easy way 5.5:
#include<bits/stdc++.h>
using namespace std;
class Node
{
    public:
    int val;
    Node* next;
  Node(int val)
  {
    this->val = val;
    this->next = NULL;
  }
};
int main(){
    Node a(10),b(20),c(300);
    a.next = &b;
    b.next = &c;

    cout<< a.val <<endl;
    cout << a.next->val <<endl;
    cout << a.next->next->val <<endl;
    return 0;
}

//5.6_dynamic node with working single linklist:
#include <bits/stdc++.h>
using namespace std;
class Node
{
public:
    int val;
    Node *next;
    Node(int val)
    {
        this->val = val;
        this->next = NULL;
    }
};
int main()
{
    Node* head = new Node(10);
    Node* a = new Node(20);
    Node* b = new Node(30);

    head->next = a;
    a->next = b;

    cout << head->val <<endl;
    cout << head->next->val <<endl;
    cout << head->next->next->val <<endl;
    return 0;
}

#5.8 printing linklist easy way:
and use teamporary variable for repeat value we print any time:

#include<bits/stdc++.h>
using namespace std;
class Node
{
public:
    int val;
    Node *next;
    Node(int val)
    {
        this->val = val;
        this->next = NULL;
    }
};
int main(){
    Node* head = new Node(10);
    Node* a = new Node(20);
    Node* b = new Node(30);
    Node* c = new Node(40);

    head->next = a;
    a->next = b;
    b->next = c;
    // cout << head->val <<endl;
    // cout <<head->next->val << endl;
    // cout <<head->next->next->val <<endl; 
    // cout <<head->next->next->next->val <<endl;
    
    Node* tmp = head;
    while(tmp != NULL){
        cout <<tmp->val <<endl;
        tmp = tmp->next;
    }
    return 0;
}

#6.2 singly linklist 
##insert at head
#include<bits/stdc++.h>
using namespace std;
class Node
{
public:
    int val;
    Node *next;
    Node(int val)
    {
        this->val = val;
        this->next = NULL;
    }
};
void insert_at_head(Node* &head,int val)
{
    Node* newnode = new Node(val);
    newnode->next = head;
    head = newnode ;
}
void print_linked_list(Node* head)
{
    Node* tmp = head;
    while(tmp != NULL)
    {
        cout << tmp->val <<endl;
        tmp = tmp->next ;
    }
}
int main(){
    Node* head = new Node(10);
    Node* a = new Node(20);
    Node* b = new Node(30);

    head->next = a;
    a->next = b; 

    insert_at_head(head,100);
    insert_at_head(head,200);
    insert_at_head(head,300);
    print_linked_list(head);
    
    return 0;
}

##insert at tail
##previous and next code like insert at head
void insert_at_tail(Node* &head,int val){
    Node* newnode = new Node(val);
    if(head == NULL){
        head = newnode;
        return;
    }
    Node* tmp = head;
    while(tmp->next != NULL){
        tmp = tmp->next;
    }
    tmp->next = newnode;
}

##insert at any position:
##previous and next code like insert at head
void insert_at_any_pos(Node* &head,int idx,int val){
    Node* newnode = new Node(val);
    Node* tmp = head;
    for(int i= 1;i<idx;i++){
        tmp = tmp->next;
    }
    newnode->next = tmp->next;
    tmp->next = newnode; 
}

##insert optimize way:
#insert at tail:
void insert_at_tail(Node* &head,Node* &tail,int val){
    Node* newnode = new Node(val);
    if(head == NULL){
        head = newnode;
        return;
    }
    tail->next = newnode;
    tail = newnode;
}

##input linked list
int main(){
    Node* head = NULL;
    Node* tail = NULL;
    int val;
    while(true){
        cin >> val;
        if(val == -1){
            break;
        }
    insert_at_tail(head,tail,val); 
    }
    print_forward(head);
    return 0;
}

##reverse linked list:
void print_reverse(Node* tmp){
    if(tmp == NULL){
        return;
    }
    print_reverse(tmp->next);
    cout << tmp->val << " ";
}

##delete at head
void delete_at_head(Node* &head){
    Node* deletenode = head;
    head = head->next;
    delete deletenode;
}

##delete at any position:
void delete_at_any_pos(Node* &head,int idx){
    Node* tmp = head;
    for(int i=1;i<idx;i++){
        tmp = tmp->next;
    }
    Node* deletenode = tmp->next;
    tmp->next = tmp->next->next;
    delete deletenode;
}

##delete at tail:
like delete at any position:
void delete_at_tail(Node* &head,Node* &tail,int idx){
    Node* tmp = head;
    for(int i=1;i<idx;i++){
        tmp = tmp->next;
    }
    Node* deletenode = tmp->next;
    tmp->next = tmp->next->next;
    delete deletenode;
    tmp = tail;
}

##doubly linked list:
#insert at head
void insert_at_head(Node* &head,Node* &tail,int val){
    Node* newnode = new Node(val);
       if(head == NULL){
          head = newnode;
          tail = newnode;
          return;
       }
    newnode->next = head;
    head->prev = newnode;
    head = newnode;
    
}

#doubly linkedlist:
#insert at tail:
void insert_at_tail(Node* &head,Node* &tail,int val){
    
    Node* newnode = new Node(val);
    if(head == NULL){
        head = newnode;
        tail = newnode;
        return; 
    }
    tail->next = newnode;
    newnode->prev = tail;
    tail = newnode;
    
}

#insert at any position
#doubly linkedlist:
void insert_at_any_pos(Node* &head,int idx,int val){
        Node* newnode = new Node(val);
        Node* tmp = head;
        for(int i=1;i<idx;i++){
            tmp = tmp->next;
        }
        newnode->next = tmp->next;
        tmp->next->prev = newnode; 
        tmp->next = newnode;     
        newnode->prev = tmp;     
}

#delete at head:
doubly linked list:
void delete_at_head(Node* &head,Node* &tail){
    Node* deletenode = head;
    head = head->next;
    delete deletenode; 
    if(head == NULL){
        tail = NULL;
        return;
    }
    head->prev = NULL;   
}

#delete at tail:
doubly linkedlist:
void delete_at_tail(Node* &head,Node* &tail){
     Node* deletenode= tail;
     tail = tail->prev;
     delete deletenode;
     if(tail == NULL){
        head = NULL;
        return;
     }
     tail->next = NULL;
}

#delete at any position:
doubly linkedlist:
void delete_at_any_pos(Node*&head,Node* &tail,int idx){
     Node* tmp = head;
     for(int i=1;i<idx;i++){
        tmp = tmp->next;
     }
     Node* deletenode = tmp->next;
     tmp->next = tmp->next->next;//next er connection done
     tmp->next->prev = tmp->next;//prev er connection done
     delete deletenode;
     
}

moudls 10: stl list & cycle detection:

#for declare list:
  list<int>l = {10,20,30,40,50,60};

#for print size:
cout << l.size() << endl;

#for print begin value:
cout <<*l.begin() << endl;

#for print list use iterator:
for(auto it = l.begin();it != l.end(); it++){
         cout << *it << endl;
 }

#print list use range based for loop:
    for(int val : l){
        cout << val << endl;
    }

#for copy list:
list<int> l = {10,20,30,40,50};
    list<int> l2(l);

#for clear list:
l.clear();

#check empty:
l.empty()

#for resize list:
l.resize(10,100);

#modifier function:

#for assign list to list:
 list<int> l = {10,20,30,40,50};
    list<int> l2;
    l2 = l;

#for insert at head :
l.push_front(100);

#for insert at tail:
l.push_back(100);
    
#for delete at head:
l.pop_front();

#for delete at tail :
l.pop_back();

#for print at any position:
*next(l.begin(),2);

#for insert at any position:
l.insert(next(l.begin(),2),100);


#vector & list complexity difference:
#for vector:
v.insert(v.begin()+2,100);
v.insert = o(n);
(v.begin()+2,100) = o(1)

#for list:
v.insert(next(l.begin(),2),100);
v.insert = o(1)
next(l.begin(),2),100) = o(n);

#for erase value of list:
l.erase(next(l.begin(),2));

#for erase multiple value:
l.erase(next(l.begin(),2),next(l.begin(),5));

#for replace value:
replace(l.begin(),l.end(),20,100);

#for find value:
auto it = find(l.begin(),l.end(),200);
    if(it == l.end()){
        cout << "NOT FOUND"<<endl;
    }else{
        cout <<"Found" << endl;
    }

#operation function:
#for remove same value in list:
l.remove();

#for sort list:
l.sort();

#for decending sort:
l.sort(greater<int>());

#for unique value find:
first: l.sort();
second: l.unique();

#print front:
cout << *l.begin() << endl;

#print reverse order in singly linkedlist:

#print reverse doubly linkedlist:

#list reverse order print:
for(auto it = l.rbegin();it != l.rend(); it++){
        cout << *it << " ";
    }

Stack data structure:
week 4:
-higher level data structure , abstruct data structure:

A Stack is a linear data structure that follows a particular order in which the operations are performed. The order may be LIFO(Last In First Out) or FILO(First In Last Out).
LIFO implies that the element that is inserted last, comes out first and FILO implies that the element that is inserted first, comes out last.

#Stack Operation:
1.Lifo = last in frist out
-push();
-pop();
-top();
-size();
-empty();

#stack implimentation:
#include<bits/stdc++.h>
using namespace std;
int main(){
    stack<int> st;
    int n;
    cin >> n;
    while(n--){
        int x;
        cin >> x;
        st.push(x);
    }
    while(!st.empty())
    {
        cout << st.top() << endl;
        st.pop();
    }
    return 0;
}

Queue Data Structure:

-Abstract Data Structure
-Higher level Data Structure
-fifo means frist in frist out

#queue properties:
-push();
-pop();
-front();
-back();
-size();
-empty();

we use singly , doubly , builtin stl for queue;
#include<bits/stdc++.h>
using namespace std;

int main(){
    queue<int> q;
    int n;
    cin >> n;
    for(int i=0;i<n;i++){
        int val;
        cin >> val;
        q.push(val);
    }
    while(!q.empty())
    {
        cout << q.front() << endl;
        q.pop();
    }
    return 0;
}





