//Moduls 01
//Time & space complexcity
time & space complexcity depend on n then we called o(n);
order of n = O(n)

#logarithmic complexity:
when a loop use increment part intro or divide then we called O(nlogn)
O(nlogn)

#Sqrt complexity:
when a loop use sqrt(n) or i*i <= n
then we called order of = O(sqrt(n))

#quadratic complexity:
//order of = o(n*n);
//order of = o(n*m);
//order of = O(n*n*n);

#linearithmic complexity:
first n intro then nlog n then we called:
Order of = O(n*nlogn)


//How to we find which complexity is best:
suppose : N = 1000;

Consant:       O(1)       -> 1
Linear:        O(N)       -> 1000
Logarithmic:   O(logN)    -> 10
Square root:   O(sqrt(N)) -> 32
quadratic:     O(N*N)     -> 1000000
Linearithmic:  O(NlogN)   -> 10000


//Sorted complexity
Consant:       O(1)
Logarithmic:   O(logN)
Square root:   O(sqrt(N))
Linear:        O(N) 
Linearithmic:  O(NlogN)
quadratic:     O(N*N) 

//space complexity sate to time complexity
1. space complexity just diffrent way to array 
2. 2d array space complexity Oder of = O(n*n)
3. space complexity temon kaje lage nah

Find out time complexity of the following problems:
problem 01:
O(n*n)
problem 02:
O(N*N)
problem 03:
O(n*Sqrt(n))
problem 04:
O(n3)
problem 05:
O(sqrt(n))
probem 06:
O(nlogn)
problem 07:
O(N*NLOGN)

//Moduls 02:
##stl : vector
//Vector initialization:
     //vector<int> v;        //type 1
    //vector<int> v(10);    //type 2
    //vector<int> v(10,-1); //type 3
    //vector<int> v2(v);    //type 4
    // int a[5] = {1,2,3,4,5};
    //vector<int> v(a,a+5); //type 5

///capacity,resize,empty,clear function

#include<bits/stdc++.h>
using namespace std;
int main(){
    vector<int> v;
    v.push_back(10);
    v.push_back(20);
    v.push_back(30);
    v.resize(7);
    for(int i=0;i<v.size();i++){
        cout << v[i] << " ";
    }
    //cout << v.size() << endl;
    //v.clear();
    //cout << v.size() << endl;
    // cout<< v[0] <<endl;
    // cout<< v[1] <<endl;
    // cout<< v[2] <<endl;
    // cout << v.capacity() <<endl;
    // v.push_back(10);
    // cout << v.capacity() << endl;
    // v.push_back(10);
    // cout << v.capacity() << endl;
    // if(v.empty()){
    //     cout << "Yes" <<endl;
    // }else{
    //     cout <<"not"<<endl;
    // }
    return 0;
}

//vector capacity increase her value when we push new value
//v.clear() = when we clear a vector then we use v.clear() function
//v.clear() = just remove size but not remove value
//v.empty() = when we check this vector is empty or not then we use this function
//v.resize(4,100) = when vector size increment or decrement then we use this function
// vector a joto ta value ase er porer sob gula 100 kore dibe

##range base loop,insert,erase,push_back,pop_back this functions:

//#include<bits/stdc++.h>
using namespace std;
int main(){
    
    // vector <int> v = {1,2,3,4,5};
    // vector<int> v2;
    // v2 = v;
    // for(int i=0;i < v2.size();i++){
    //     cout << v2[i] <<" ";
    // }
    // for(int x : v2){
    //     cout << x <<" ";
    // }
    vector<int> v ={1,2,3,4,5,6};
    vector<int> v2 = {100,200,300};
    //v.insert(v.begin()+2,v2.begin(),v2.end());
    v.erase(v.begin()+1,v.begin()+5);//when we delete middle element

    for(int x : v){
        cout <<  x <<" ";    
     }
    return 0;
}
//v2 = v we assign one vector to another
// we use range base forloop
//v.push_back = add new value to last index
//v.pop_back = remove element to last index
//v.insert(pos,val) = when we need new element add in array
//then we use v.insert(v.begin()+2,100);
//v.erase(v.begin()+2);// we use this function when any position we deleted
////v.insert(v.begin()+2,v2.begin(),v2.end());

##replace, find function

//#include<bits/stdc++.h>
using namespace std;
int main(){
    vector<int> v = {1,2,3,2,5,2};
    // replace(v.begin(),v.end()-1,2,100);
   auto it = find(v.begin(),v.end(),5);
    if(it == v.end()){
        cout << "Not found"<<endl;
    }else{
        cout <<"Found" <<endl;
    }
    return 0;
}
//Replace function
//replace(v.begin(),v.end()-1,2,100);

//find function
//auto it = find(v.begin(),v.end(),100);
//we find any value uses this function

##front, back, size function:

#include<bits/stdc++.h>
using namespace std;
int main(){
    vector<int> v={1,2,3,4,5};
    cout << v[3] << endl;
    cout << v.back() <<endl;
    return 0;
}
//vector element access:
//v[3]

//when we print array last element then we use 
//v.back()
//another way to access element: 
// cout << v[v.size()-1] <<endl;

//when we print arral frist element then we use
//v.front()
//another way to access element:
//v[0]

##iterator:

//#include<bits/stdc++.h>
using namespace std;
int main(){
    vector<int> v ={1,2,3,4,5,6};
    for(auto it = v.begin(); it < v.end();it++){
        cout << *it << " ";
    }
    return 0;
}

##vector input output:
//#include<bits/stdc++.h>
using namespace std;
int main(){
    int n;
    cin >> n;
    // vector<int>v(n);
    // for(int i=0;i<n;i++){
    //     cin >> v[i];
    // }
    vector<int>v;
    for(int i=0;i<n;i++){
        int x;
        cin >> x;
        v.push_back(x);
    }
    for(int i=0;i<n;i++){
        cout << v[i] <<" ";
    }
    return 0;
}
//input , output of vector
//two way of vector ,we input from user

##vector string input and output:

//#include<bits/stdc++.h>
using namespace std;
int main(){
    int n;
    cin >> n;
    cin.ignore();
    vector<string> v(n);
    for(int i=0;i<n;i++){
        getline(cin,v[i]);
    }
    for(string s : v){
        cout << s <<endl;
    }
    return 0;
}
//string input and output
//when we input from user with full name then we use 
// getline(cin,v[i]);
//and after size we call cin.ignore();

Moudls : 05:
##single linklist, 
#assign linklist 5.4:
#include<bits/stdc++.h>
using namespace std;
class Node
{
    public:
    int val;
    Node* next;
};
int main(){
    Node a,b,c;
    a.val = 10;
    b.val = 20;
    c.val = 30;

    a.next = &b;
    b.next = &c;
    c.next = NULL;
    cout << a.val <<endl;
    cout << a.next->val <<endl;
    cout << a.next->next->val <<endl;
    return 0;
}

#use constructor for linklist assign easy way 5.5:
#include<bits/stdc++.h>
using namespace std;
class Node
{
    public:
    int val;
    Node* next;
  Node(int val)
  {
    this->val = val;
    this->next = NULL;
  }
};
int main(){
    Node a(10),b(20),c(300);
    a.next = &b;
    b.next = &c;

    cout<< a.val <<endl;
    cout << a.next->val <<endl;
    cout << a.next->next->val <<endl;
    return 0;
}

//5.6_dynamic node with working single linklist:
#include <bits/stdc++.h>
using namespace std;
class Node
{
public:
    int val;
    Node *next;
    Node(int val)
    {
        this->val = val;
        this->next = NULL;
    }
};
int main()
{
    Node* head = new Node(10);
    Node* a = new Node(20);
    Node* b = new Node(30);

    head->next = a;
    a->next = b;

    cout << head->val <<endl;
    cout << head->next->val <<endl;
    cout << head->next->next->val <<endl;
    return 0;
}

#5.8 printing linklist easy way:
and use teamporary variable for repeat value we print any time:

#include<bits/stdc++.h>
using namespace std;
class Node
{
public:
    int val;
    Node *next;
    Node(int val)
    {
        this->val = val;
        this->next = NULL;
    }
};
int main(){
    Node* head = new Node(10);
    Node* a = new Node(20);
    Node* b = new Node(30);
    Node* c = new Node(40);

    head->next = a;
    a->next = b;
    b->next = c;
    // cout << head->val <<endl;
    // cout <<head->next->val << endl;
    // cout <<head->next->next->val <<endl; 
    // cout <<head->next->next->next->val <<endl;
    
    Node* tmp = head;
    while(tmp != NULL){
        cout <<tmp->val <<endl;
        tmp = tmp->next;
    }
    return 0;
}

#6.2 single linklist insert in a head value
#include<bits/stdc++.h>
using namespace std;

class Node
{
public:
    int val;
    Node *next;
    Node(int val)
    {
        this->val = val;
        this->next = NULL;
    }
};
void insert_at_head(Node* &head,int val)
{
    Node* newnode = new Node(val);
    newnode->next = head;
    head = newnode ;
}
void print_linked_list(Node* head)
{
    Node* tmp = head;
    while(tmp != NULL)
    {
        cout << tmp->val <<endl;
        tmp = tmp->next ;
    }
}
int main(){
    Node* head = new Node(10);
    Node* a = new Node(20);
    Node* b = new Node(30);

    head->next = a;
    a->next = b; 

    insert_at_head(head,100);
    insert_at_head(head,200);
    insert_at_head(head,300);
    print_linked_list(head);
    
    return 0;
}

///how to work this operation 
//insert newnode

6.4 single linklist insert in a tails
#include<bits/stdc++.h>
using namespace std;
class Node
{
public:
    int val;
    Node *next;
    Node(int val)
    {
        this->val = val;
        this->next = NULL;
    }
};
void insert_in_tail(Node* &head,int val){
    Node* newnode = new Node(val);
    if(head == NULL)//if no head declare then head is newnode.
    {
        head = newnode;
        return;
    }
    Node* tmp = head;
    while(tmp->next != NULL)
    {
        tmp = tmp->next;
    }
    tmp->next = newnode;
}
void print_in_linkedlist(Node* head)
{
    Node* tmp = head;
    while(tmp != NULL)
    {
        cout << tmp->val <<endl;
        tmp = tmp->next;
    }
    
}
int main(){
    Node* head ;
    //when no head declary
    // = new Node(10);
    // Node* a = new Node(20);
    // Node* b = new Node(30);

    // head->next = a;
    // a->next = b;

    insert_in_tail(head,100);
    print_in_linkedlist(head);
    return 0;
}
